=head1 NAME

File_Transfer.pm - File Transfer module for Rover


=head1 VERSION

1.00


=head1 SYNOPSYS

  # Format for commands.run
  GENERAL:{
    ...

    # Add module to rover runtime environment
    use File_Transfer.pm;
  };

  Ruleset:{
    ...

    # Get remote_file to local_file from remote host
    get_file(remote_file, local_file);

    # Put local_file to remote_file on remote host
    put_file (local_file, remote_file);

  };

File_Transfer will determine the best method of transfering the file
based on service availability and the value of
$File_Trnasfer::preferred_protocol.  The public functions available
are as follows:

  File_Transfer::put_file();
  File_Transfer::get_file();

Also these configuration variables can be set to manipulate the behavior of File_Transfer:

  $File_Transfer::append_hostname
  $File_Transfer::login_timeout
  $File_Transfer::transfer_timeout
  $File_Trnasfer::preferred_protocol


=head1 DESCRIPTION

The basic use of this module is to include it in the Rover commands.run
file in the GENERAL section (use File_Transfer) and then either call get_file()
or put_file() in any defined ruleset.  The Perl module file itself must
exist in the modules directory, or anywhere within the @INC() path.


=head1 USAGE

=over 4

=item put_file("local file","remote file");

Both can be relative paths to the file.  Note, however, that on the remote
side, assuming your $HOME directory is your CWD could be dangerous.  put_file
does not check the existance of either file, failures are detected by the
output of the file transfer commands.

=item get_file("remote file","local file");

Transfers the remote file to the local machine.  Again, files are not
checked for existance.

=head2 Configurable Package Variables:

=item $File_Transfer::append_hostname

Determines wether or not to append the remote host's name/ip to the local
filename.  This is handy when you want to get the same file from multiple
hosts and put them into one directory.  Default is true, set to 0 to disable.

=item $File_Transfer::login_timeout

Timeout value for failed login attempts.  Default value is 5 seconds.

=item $File_Transfer::transfer_timeout

How long to wait for a file transfer to complete.  This defaults to 300 seconds.

=item $File_Trnasfer::preferred_protocol

Acceptable values are "sftp" or "ftp".  This determines what protocol
of file transfer to "prefer" for each host.  File_Transfer will still check
the service and use an alternative protocol if this one is not available.


=head1 FAQ - Frequently Asked Questions

This is sofar my own list, so this is sure to expand over time.

=head2 How can I force ftp over sftp?

You need to put the following line in the GENERAL section of the commands.run
configuration file:

        $File_Transfer::preferred_protocol = 'ftp';

=head2 I'm using expert mode in Rover, how do I use this function?

Three arguments are needed: 1. file name arguments, 2. expect object handle,
3. hostname.  Make sure to use the appropriate variables when calling
these routines, an example would be:

        put_file('local_file,remote_file', $exp_obj, $hostname);

=head2 I'm getting sftp protocol errors on only one server, is there any way I can force ftp on one server and still prefer sftp elsewhere?

Probably the best way to do this is to add the following to the GENERAL
section of commands.run:

        $File_Transfer::ftp_put_routines{'hostname'} = 'ftp_put_file';
        $File_Transfer::ftp_get_routines{'hostname'} = 'ftp_get_file';

This skips the process of determining what ftp service is available and forces
ftp for get and put on the particular hostname.

=head1 AUTHORS

Bryan Bueter (e-mail to come)


=head1 LICENSE

This module can be used under the same license as Perl.


=head1 DISCLAIMER

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
