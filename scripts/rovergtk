#!/usr/bin/perl -I/home/bbueter/labroom/rover3-beta/lib
#
# Promgram:    RoverGtk
# Author:      Bryan Bueter
#
# Description: Graphical user interface for Rover

use strict;
use Rover;

use Gtk2;
use Gtk2::GladeXML;
use Gtk2::SimpleList;

use POSIX;
use Carp;

our $false = 0;
our $true = 1;

#######################################################################
# Create Rover object and populate data
#
my $rover = new Rover;

### TEST ###
my @hosts = ("jupiter", "europa", "ravager", "epslad04");
$rover->add_host(@hosts);
foreach my $host ( $rover->host_info() ) {
  my $host_info = $rover->host_info($host);
  $host_info->login_methods("shell_by_ssh");
}

my $ruleset1 = $rover->rulesets("Uptime");
$ruleset1->add("execute", "uptime");
my $ruleset2 = $rover->rulesets("User Info");
$ruleset2->add("execute", "who");
my $ruleset3 = $rover->rulesets("Process Info");
$ruleset3->add("execute", "ps -ef");
### TEST ###


#######################################################################
# Import glade XML and connect perl objects
#
Gtk2->init;
our $gladexml_main = Gtk2::GladeXML->new("./rovergtk_main.glade");
$gladexml_main->signal_autoconnect_from_package('main');

my $main = $gladexml_main->get_widget("main");
$main->signal_connect("delete_event", sub { Gtk2->main_quit; });


# Main hosts view window
#
my $main_hosts_view = $gladexml_main->get_widget("main_hosts_view");
my $main_hosts_slist = Gtk2::SimpleList->new_from_treeview($main_hosts_view,
	'Hostname' => 'text',
	'OS' => 'text',
	'Description' => 'text', );

foreach my $host ( $rover->host_info() ) {
  my $host_info = $rover->host_info($host) ;
  push @{$main_hosts_slist->{data}}, [ $host, $host_info->os, $host_info->description ];
}
$main_hosts_slist->signal_connect("row_activated" => \&host_edit_window, $rover);


# Misc. signals that need objects passed
#
my $main_hosts_menu_delete = $gladexml_main->get_widget("main_hosts_menu_delete");
$main_hosts_menu_delete->signal_connect("activate" => \&menu_hosts_delete, [ $main_hosts_slist, $rover ]);

my $main_hosts_menu_edit = $gladexml_main->get_widget("main_hosts_menu_edit");
$main_hosts_menu_edit->signal_connect("activate" => \&menu_hosts_edit, [ $main_hosts_slist, $rover ]);

my $main_button_run = $gladexml_main->get_widget("main_button_run");
$main_button_run->signal_connect("clicked" => \&run_rover, $rover);


# Start main Gtk2 loop
#
$main->show_all();
Gtk2->main;

#######################################################################
# Main menu routines
#

sub menu_file_new {

}

sub menu_file_open {

}

sub menu_file_save {

}

sub menu_file_save_as {

}

sub menu_hosts_edit {
  my ($widget, $data) = @_;

  my $main_hosts_slist = $data->[0];
  my $rover = $data->[1];

  my $tree_selection = $main_hosts_slist->get_selection;
  my $tree_path = $tree_selection->get_selected_rows;
  host_edit_window($main_hosts_slist, $tree_path, NULL, $rover);
}

sub menu_hosts_delete {
  my ($widget, $data) = @_;

  my $main_hosts_slist = $data->[0];
  my $rover = $data->[1];

  my @selection = $main_hosts_slist->get_selected_indices;
  my $host_name = $main_hosts_slist->{data}[$selection[0]][0];

  splice @{$main_hosts_slist->{data}}, $selection[0], 1;
  my $count = $rover->del_host($host_name);
}

sub about_rovergtk {

}

#######################################################################
# Edit the host from the main window
#
sub host_edit_window {
  my ($slist, $path, $column, $rover) = @_;

  my $gladexml = Gtk2::GladeXML->new("./rovergtk_hosts.glade");

  my $host_edit = $gladexml->get_widget("host_edit");
  my $host_edit_cancel = $gladexml->get_widget("host_edit_cancel");
  my $host_edit_ok = $gladexml->get_widget("host_edit_ok");

  $host_edit->set_default($host_edit_ok);

  my $activate_sub = sub {
	my ($widget, $data) = @_;

	my $host_edit = $data->[0];
	my $slist = $data->[1];
	my $rover = $data->[2];
	my $gladexml = $data->[3];

	my $host_edit_hostname = $gladexml->get_widget("host_edit_hostname");
	my $host_edit_os = $gladexml->get_widget("host_edit_os");
	my $host_edit_description = $gladexml->get_widget("host_edit_description");
	my $host_edit_username = $gladexml->get_widget("host_edit_username");

	my $host_info = $rover->host_info($host_edit_hostname->get_text());
	$host_info->os( $host_edit_os->get_text() );
	$host_info->description( $host_edit_description->get_text() );
	$host_info->username( $host_edit_username->get_text() );

	$host_edit->hide_all();

	@{$slist->{data}} = ();
	foreach my $host ( $rover->host_info() ) {
	  my $host_info = $rover->host_info($host) ;
	  push @{$slist->{data}}, [ $host, $host_info->os, $host_info->description ];
	}

  };
  $host_edit_ok->has_default($true);
  $host_edit_ok->signal_connect("clicked" => $activate_sub, [ $host_edit, $slist, $rover, $gladexml ]);
  $host_edit_ok->signal_connect("activate" => $activate_sub, [ $host_edit, $slist, $rover, $gladexml ]);

  $host_edit_cancel->signal_connect("clicked" => sub {
	my ($widget, $host_edit) = @_;

	$host_edit->destroy();
  }, $host_edit);

  my $row_ref = $slist->get_row_data_from_path($path);
  my $hostname = $row_ref->[0];
  my $host_info = $rover->host_info($hostname);

  my $host_edit_hostname = $gladexml->get_widget("host_edit_hostname");
  my $host_edit_os = $gladexml->get_widget("host_edit_os");
  my $host_edit_description = $gladexml->get_widget("host_edit_description");
  my $host_edit_username = $gladexml->get_widget("host_edit_username");

  $host_edit_hostname->set_text($host_info->hostname);
  $host_edit_os->set_text($host_info->os);
  $host_edit_description->set_text($host_info->description);
  $host_edit_username->set_text($host_info->username);

  $host_edit->set_title("Modify $hostname");
  $host_edit->show_all;
}

#######################################################################
# Add new host entry
#
sub host_new_window {
  my $gladexml = Gtk2::GladeXML->new("./rovergtk_hosts.glade");

}

#######################################################################
# Run Rover
#
sub run_rover {
  my ($widget, $rover) = @_;

  my $gladexml_run = Gtk2::GladeXML->new("./rovergtk_run.glade");

  my $run_window = $gladexml_run->get_widget("run_window");
  my $run_cancel = $gladexml_run->get_widget("run_cancel");
  $run_cancel->signal_connect("clicked" => sub {
	my ($widget, $run_window) = @_;
	$run_window->destroy();
  }, $run_window, );

  my $run_rulesets_view = $gladexml_run->get_widget("run_rulesets_view");
  my $run_hosts_view = $gladexml_run->get_widget("run_hosts_view");
  my $run_hosts_all = $gladexml_run->get_widget("run_hosts_all");
  my $run_quick_command = $gladexml_run->get_widget("run_quick_command");
  my $run_quick_command_entry = $gladexml_run->get_widget("run_quick_command_entry");

  my $run_ruleset_combo_name = $gladexml_run->get_widget("run_ruleset_combo_name");
  my $run_ruleset_combo_name_model = Gtk2::ListStore->new ('Glib::String');
  my $run_ruleset_combo_name_renderer = Gtk2::CellRendererText->new;
  $run_ruleset_combo_name->set_model($run_ruleset_combo_name_model);
  $run_ruleset_combo_name->pack_start($run_ruleset_combo_name_renderer, $true);
  $run_ruleset_combo_name->add_attribute($run_ruleset_combo_name_renderer, text => 0);

#  my $run_ruleset_combo_os = $gladexml_run->get_widget("run_ruleset_combo_os");
#  my $run_ruleset_combo_os_model = Gtk2::ListStore->new ('Glib::String');
#  my $run_ruleset_combo_os_renderer = Gtk2::CellRendererText->new;
#  $run_ruleset_combo_os->set_model($run_ruleset_combo_os_model);
#  $run_ruleset_combo_os->pack_start($run_ruleset_combo_os_renderer, $true);
#  $run_ruleset_combo_os->add_attribute($run_ruleset_combo_os_renderer, text => 0);

  my $run_rulesets_view = Gtk2::SimpleList->new_from_treeview($run_rulesets_view,
	'Ruleset Name' => 'text',
	'OS' => 'text', );

  my $run_hosts_slist = Gtk2::SimpleList->new_from_treeview($run_hosts_view,
	'Hostname' => 'text',
	'OS' => 'text',
	'Description' => 'text', );
  $run_hosts_slist->get_selection->set_mode ('multiple');

 # Make the run_hosts_all toggle and run_hosts_slist selections match
 #
  $run_hosts_slist->signal_connect("grab-focus" => sub {
	my ($widget, $run_hosts_all) = @_;
	if ( ! $widget->get_selected_indices ) {
	  $run_hosts_all->set_active($true);
	} else {
	  $run_hosts_all->set_active($false);
	}
  }, $run_hosts_all);

  $run_hosts_all->signal_connect("toggled" => sub {
	my ($widget, $run_hosts_slist) = @_;
	if ( $widget->get_active ) {
	  $run_hosts_slist->unselect(0..@{$run_hosts_slist->{data}});
	}
  }, $run_hosts_slist);
  $run_hosts_all->set_active($true);

 # Populate ruleset combo box
 #
  foreach my $ruleset ( sort( $rover->rulesets() ) ) {
    $run_ruleset_combo_name->append_text($ruleset);
  }

 # Populate host list window
 #
  foreach my $host ( $rover->host_info() ) {
    my $host_info = $rover->host_info($host);
    push(@{$run_hosts_slist->{data}}, [ $host, $host_info->os, $host_info->description ]);
  }

  $run_window->show_all;
}

#######################################################################
# Common routines
#

sub quit_rovergtk {
  Gtk2->main_quit;

  exit(0);
}
